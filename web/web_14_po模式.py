#!/usr/bin/python3
# -*- coding: utf-8 -*-
'''
自己的理解
为什么做自动化？自动化对哪些场景有效？
回归测试：功能点特别多，没有改动但是不能保证没有问题，必须回归验证，特别占用时间。操作重复，每次发版都需要验证。
这部分做了自动化之后，能够节省时间，提高整体测试效率。并且可以提前回归，提早发现问题。
新功能：必须手工验证，自动化无法替代。---原因：新功能需求不确定；上线时间紧迫，没有时间写自动化
自动化条件---老功能、稳定（需求变更很少）、项目周期长
自动化的作用就是解放简单重复的操作，更多的时间来验证新功能，以及更重要更复杂的逻辑。

你们项目有多少个模块？多少个测试用例？

自动化方案
1.是否所有用例自动化？---no
2.哪些模块哪些功能做自动化？---筛选原则：优先选择需求稳定、历史bug多、操作不复杂、重要的模块
 先选一个点落地(试点)，有成果了再去扩大范围。做自动化前后BUG量、花费时间的对比图。
3.如何写自动化测试用例？大概花费多少时间？
4.做自动化之后要达到的效果？通过率？如何与项目结合？运行策略？
5.流程图-项目的自动化流程（用例的编写---执行---结果---报告、日志---多久运行一次）


这里咱们从第3点开始学习：
如何写自动化用例？
（1）选择已有工具，还是代码？它们的区别是什么---根据团队整体的代码水平决定；自己搭建框架的灵活性更高，但是工具也可以。
（2）选择代码之后，如何搭建框架

拿到一个新模块要写自动化用例？
（1）设计测试用例---了解需求、设计并执行测试用例、熟悉页面操作流程、准备数据
（前置条件、操作步骤、断言[预期结果与实际结果做对比]、测试数据---写自动化，这些信息必须明明白白）
补充：面试问写了多少自动化测试用例？100多-三四百比较合适
举例前程贷页面登录、投资流程:
登陆用例：
正常登陆：打开网页 - 登陆页面/登陆 - 首页/查看是否有【我的帐户】元素/或者用title或者url来断言也可以
异常登陆：打开网页 - 登陆页面/登陆 - 登陆页面/提示了异常信息
投资用例：
登陆成功 - 首页/选标 - 标页面/投资操作 - 个人页面/钱少了没有

po设计思想讲解：
Web用例：UI页面点点点。  30个页面    300个用例。涉及到的所有操作全在页面当中。
把 30个页面  封装成   30个类  === 包含所有页面的操作。
300个用例 == 从30个类当中，调用它的方法，串起来实现的。
用例1(前置+步骤+断言)：页面1/操作1 + 页面2/操作3 + 页面3/操作1 + 页面7/操作2 + 页面12/操作10
登陆页面/登陆操作 + 首页/点击抢投标操作 + 标详情页面/投标操作/点击查看并激活 + 个人页面/获取余额
登陆页面/登陆操作 + 首页/获取用户元素

30个页面 == 30个类   如果元素定位，元素操作发生变化 ？？只需要修改1个类，不需要修改测试用例
PO = PageObject页面对象
PO核心思想：测试用例 = 页面对象 + 测试数据。分离测试用例和测试对象。

UI自动化测试用例编写原则(稳定性优先级最高)：
1、保持用例的独立性：无论其它用例成功与否，完全不影响我的运行。
 页面串起来的 - 保证它在任何一个页面不报错？预测它会在哪个页面出错？
2、测试用例-在一个大场景下。

测试数据单独管理：
1、数据共用、模块级共用、全局级共用。
2、测试环境、预发布环境、生产环境。---不同环境的数据应该分开管理。
基于以上原因，结论：所有数据全部拿出来统一管理。

笔记对应练习：web_po_v1
'''
