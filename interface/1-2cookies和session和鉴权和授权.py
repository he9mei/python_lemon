#!/usr/bin/python3
# -*- coding: utf-8 -*-

'''

1.http cookies和session
cookie：由服务端生成后返回，保存到客户端。（通常用于保存用户登录信息）
session：会话，由服务端生成且保存在服务端。
（为什么需要cookie和session？）
http协议是无状态协议，当服务器需要记录用户状态的时候，需要这些机制来识别用户。

//
补充：
cookie产生机制：cookie是服务器产生，通过响应头set-cookie通过键值对如serverID=888返回给客户端
然后客户端请求时，，如果有多个cookie值是通过key来区分，一起传入
也就是当我们服务端想让客户端保存一些信息的话，就是通过cookie来保存。比如登录信息。

session产生机制：session是会话，保持一次通信的过程，如登录后操作再退出，会话结束。
登录后将用户信息保存在服务端并加密生成sessionid，
再将seesionID通过响应头放在set-cookie中返回给客户端
客户端将cookie保存到本地，再请求其他接口如查询用户信息等，需要在请求头cookie中传入sessionid,则无需重新登录
但是会话不可能一直保持，sessionid不可能一直有效，否则不安全，容易泄露信息，
所有sessionID是有有效期的。失效后就需要重新登录，生成新的sessionID。

问题：用户登录后，用户名密码以及有效期是保存在哪里?
服务器的缓存层或者持久层等
本地保存的不是用户名密码，而是服务端通过cookie传过来的seesionID

再次梳理session的生成和使用过程：
1.登录，用户名、密码传给服务端
2.服务端拿到信息后，生成有效期，保存到缓存服务器（redis,tomcat,内存等），
并且生成sessionid。
sessionid的作用就是使能够找到服务端存放的用户信息。
3.sessionid通过响应头set-cookies返回给客户端
4.客户端拿到cookie保存到本地
5.下次请求，客户端就会自动把本地的cookies放到请求头的cookies传给服务端
6，提取sessionid，去找到服务端保存的用户信息。
如果已经过期，需要重新登录。

cookie有效期是客户端决定的，也就是浏览器决定的；
session有效期是服务端决定的，是开发决定的

再次梳理token的生成和使用过程：
以上第1步，登录，用户名、密码传给服务端
以上第2步，如果不只需要用户名密码，还需要知道用户的角色等（如学生、老师）来决定用户可以做的操作。
这里可以将所有信息生成token令牌（或者apppkey），一次返回给客户端。（此时可以不用再返回sessionID）。
客户端下次请求带上token，服务端就能完成一个鉴权的过程。
但是token不一定是通过set-cookie和cookie传递，我们公司是直接通过出参和入参。
以上第3步，token通过响应正文/响应头返回给客户端
以上第4步，客户端不会将token保存到本地
以上第5步，下次请求，客户端就会把token放到请求头/请求参数传给服务端
以上第6步，，通过token去找到服务端保存的用户信息。完成鉴权。

问题:token可以放在cookie中吗？
可以但是不建议。因为token很重要，放在coikie中会存在本地，如果恶意篡改，很不安全。
//

2.HTTP鉴权和授权
Authentication 鉴权，你是谁？token
Authorization授权，你可以做什么？证书+秘钥

//补充：
鉴权---
登录后服务端会生成并返回token，客户端再进行登录后操作如查询用户信息时需要传入token，用以鉴别用户。
token信息包含了sessionid以及过期时间等

授权---
比如某些操作需要下载证书或者需要提供key秘钥
如果遇到这种需要授权的接口，怎么进行测试呢？
需要传入证书文件
//

'''